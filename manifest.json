{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"TicketDispenserTest.java:81: error: incompatible types: TurnNumberSequenceRegular cannot be converted to TurnNumberSequence\n        TurnNumberSequence regularTurnNumberSequence = new TurnNumberSequenceRegular(2001);\n                                                       ^\n1 error\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n    private TurnNumberSequence turnNumberSequence;\n\n    public TicketDispenser() {\n        this(new TurnNumberSequenceVip(0));\n    }\n\n    public TicketDispenser(TurnNumberSequence turnNumberSequence) {\n        this.turnNumberSequence = turnNumberSequence;\n    }\n\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = this.turnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}\n","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class TicketDispenserTest {\n\n    @Test\n    public void a_new_ticket_should_have_the_turn_number_subsequent_to_the_previous_one() {\n        // Given\n        TicketDispenser dispenser = new TicketDispenser();\n\n        // When\n        TurnTicket previousTicket = dispenser.getTurnTicket();\n        TurnTicket newTicket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(1, newTicket.getTurnNumber() - previousTicket.getTurnNumber());\n    }\n\n    @Test\n    public void a_new_ticket_should_have_the_turn_number_subsequent_to_the_previous_one_from_another_dispenser() {\n        // Given\n        TicketDispenser anotherDispenser = new TicketDispenser();\n        TicketDispenser dispenser = new TicketDispenser();\n\n        // When\n        TurnTicket previousTicketFromAnotherDispenser = anotherDispenser.getTurnTicket();\n        TurnTicket newTicket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(1, newTicket.getTurnNumber() - \n            previousTicketFromAnotherDispenser.getTurnNumber());\n    }\n\n    @Test\n    public void the_new_ticket_should_have_a_turn_number_when_the_number_is_given_to_the_dispenser() {\n        // Given\n        MockTurnNumberSequence mockTurnNumberSequence = new MockTurnNumberSequence();\n        mockTurnNumberSequence.arrangeNextTurnNumber(11);\n        TicketDispenser dispenser = new TicketDispenser(mockTurnNumberSequence);\n\n        // When\n        TurnTicket newTicket = dispenser.getTurnTicket();\n\n        // Then\n        assertEquals(11, newTicket.getTurnNumber());\n        mockTurnNumberSequence.verifyMethodGetNextTurnNumberIsCalledOnce();\n    }\n\n    @Test\n    public void the_new_ticket_should_have_a_turn_number_when_the_number_is_given_to_the_dispenser_using_mockito() {\n        // Given\n        TurnNumberSequence mockTurnNumberSequence = mock(TurnNumberSequence.class);\n        when(mockTurnNumberSequence.getNextTurnNumber()).thenReturn(11);\n        TicketDispenser ticketDispenser = new TicketDispenser(mockTurnNumberSequence);\n\n        // When\n        TurnTicket newTicket = ticketDispenser.getTurnTicket();\n\n        // Then\n        assertEquals(11, newTicket.getTurnNumber());\n        verify(mockTurnNumberSequence).getNextTurnNumber();\n    }\n\n    @Test\n    public void the_turn_number_of_VIP_customers_starts_from_1001() {\n        // Arrange\n        TurnNumberSequence vipTurnNumberSequence = new TurnNumberSequenceVip(1001);\n        TicketDispenser vipCustomerTicketDispenser = new TicketDispenser(vipTurnNumberSequence);\n\n        // Act\n        TurnTicket firstTicketOfVipCustomer = vipCustomerTicketDispenser.getTurnTicket();\n\n        // Assert\n        assertEquals(1001, firstTicketOfVipCustomer.getTurnNumber());\n    }\n\n    @Test\n    public void the_turn_number_of_regular_customers_starts_from_2001() {\n        // Arrange\n        TurnNumberSequence regularTurnNumberSequence = new TurnNumberSequenceRegular(2001);\n        TicketDispenser regularCustomerTicketDispenser = new TicketDispenser(regularTurnNumberSequence);\n\n        // Act\n        TurnTicket firstTicketOfRegularCustomer = regularCustomerTicketDispenser.getTurnTicket();\n\n        // Assert\n        assertEquals(2001, firstTicketOfRegularCustomer.getTurnNumber());\n    }\n\n    // TODO: the_dispensers_for_VIP_and_regular_customers_could_be_used_together\n}\n\n","TurnNumberSequence.java":"public abstract class TurnNumberSequence {\n\n    public abstract int getNextTurnNumber();\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}\n","MockTurnNumberSequence.java":"public class MockTurnNumberSequence extends TurnNumberSequence {\n    private int nextTurnNumber;\n    private int callCount;\n\n    public MockTurnNumberSequence() {\n        nextTurnNumber = 0;\n        callCount = 0;\n    }\n\n    public void arrangeNextTurnNumber(int nextTurnNumber) {\n        this.nextTurnNumber = nextTurnNumber;\n    }\n\n    @Override\n    public int getNextTurnNumber() {\n        this.callCount++;\n        return this.nextTurnNumber;\n    }\n\n    public void verifyMethodGetNextTurnNumberIsCalledOnce() {\n        if (this.callCount != 1) {\n            throw new IllegalStateException(\"The method MockTurnNumberSequence.getNextTurnNumber() should be called once.\");\n        }\n    }\n}","TurnNumberSequenceVip.java":"public class TurnNumberSequenceVip extends TurnNumberSequence {\n    private static int turnNumber;\n\n    public TurnNumberSequenceVip(int startTurnNumber) {\n        turnNumber = startTurnNumber;\n    }\n\n    @Override\n    public int getNextTurnNumber() {\n        return turnNumber++;\n    }\n}","TurnNumberSequenceRegular.java":"public class TurnNumberSequenceRegular {\n    private static int turnNumber;\n\n    public TurnNumberSequenceRegular(int startTurnNumber) {\n        turnNumber = startTurnNumber;\n    }\n\n}"}